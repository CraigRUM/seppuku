{"version":3,"sources":["components/Camera/Camera.tsx","model/Point.ts","model/CannyEdgeDetector.ts","model/HoughTransform.ts","model/Intersection.ts","model/Square.ts","model/GameBoard.ts","components/Decector/Decector.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/Camera/Camera.module.css","logo.svg","components/Camera/camera.svg","components/Camera/bin.svg"],"names":["Camera","_ref","ctxReady","width","height","videoConstraints","facingMode","_useState","useState","_useState2","Object","slicedToArray","imageSrc","setImageSrc","_useState3","_useState4","imageElement","setImageElement","_useState5","_useState6","imageRef","setImageRef","_useState7","_useState8","loadedImage","setLoadedImage","canvasRef","createRef","webcamRef","React","useRef","capture","useCallback","current","canvas","getCanvas","console","log","ctx","getScreenshot","webcam","react_default","a","createElement","react_webcam_default","className","styles","camera","ref","screenshotFormat","useEffect","onLoad","getImageHeight","onRefChange","src","alt","id","node","_ref2","img","target","getContext","drawImage","boxSize","xMod","yMod","y","x","fillStyle","concat","fillRect","reset","callback","uiButton","onClick","binIcon","cameraIcon","Fragment","CameraWrapper","Point","imageWidth","classCallCheck","this","rIndex","gIndex","bIndex","data","hexVal","n","toString","hexString","_hexString$slice$matc","slice","match","map","s","Number","colour","arguments","length","undefined","rgb","rgbVal","defaultOptions","lowThreshold","highThreshold","gaussianBlur","Gx","Gy","convOptions","bitDepth","mode","HoughTransform","distance","minLength","maxTilt","_this","THICKNESS","HOZIZONTAL","VERTICAL","numAngleCells","rhoMax","accum","Array","drawingWidth","drawingHeight","cosTable","sinTable","findMaxInHough","lines","i","j","max","b","bestRho","push","x1","y1","x2","y2","newLines","filter","l","mainX","mainY","forEach","line","drawLine","_loop","pop","mainLineOrientation","checkOrientation","main","getMidPoint","secondary","getLineDistance","beginPath","strokeStyle","moveTo","lineTo","stroke","closePath","houghAcc","rho","thetaIndex","Math","sqrt","theta","PI","cos","sin","getDif","start","end","min","Intersection","Square","topLeft","bottomRight","intialised","numbers","provisonal","number","pos","sq","row","col","filteredPos","heightMod","percent","widthMod","listToFilter","inList","tryFilter","list","_this2","others","c","apply","toConsumableArray","includes","val","fill","draw","dataURL","_this3","isEmpty","blank","document","body","style","backgroundImage","Tesseract","recognize","progress","then","res","text","replace","substring","drawLetter","catch","offsetX","offsetY","buffer","b_ctx","toDataURL","font","fillText","r","g","imageData","getImageData","count","blackCount","GameBoard","cols","rows","squares","solvefailed","cells","colours","e","group","bSquare","populateCellData","floor","random","updatePossible","filterPossible","failed","cell","getNextBest","guessCell","fillCell","getRandomInt","options","refinedOptions","v","_ret","getPos","filterPos","setTimeout","clearBoard","getRow","getCol","getSquare","Decector","imageHeight","threshholdDone","setThreshholdDone","edges","setEdges","origin","setOrigin","points","setPoints","orgImageRef","intersectionPoints","gameBoard","freshPoints","Image","load","grey","image","checkProcessable","channels","components","assign","brightness","maxValue","gfOptions","sigma","radius","gf","gaussianFilter","gradientX","convolution","gradientY","G","hypotenuse","constructor","nms","kind","finalImage","dir","round","atan2","getValueXY","setValueXY","currentNms","currentEdge","currentPixels","outer","k","newPixels","cannyEdgeDetector","copyToCanvas","boxImage","doHueTransform","houghTransform","pixelData","upContrast","threshold","point","inBox","getColourMagnitued","hlines","vlines","hl","vl","intersects","findSquares","waitForSquares","reverse","p","getLetter","putImageData","plot","contrast","intercept","solveGame","solved","populateBoard","solvecb","solve","hidden","App","setCanvas","cameraComponent","components_Camera_Camera","detectorComponent","components_Decector_Decector","logo","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","getElementById","module","exports"],"mappings":"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","file":"static/js/main.7e79b9d0.chunk.js","sourcesContent":["import React, { createRef, FC, useCallback, useEffect, useState } from 'react';\nimport styles from './Camera.module.css';\nimport Webcam from \"react-webcam\";\nimport cameraIcon from'./camera.svg';\nimport binIcon from'./bin.svg';\nimport Point from '../../model/Point';\n\ninterface CameraProps {ctxReady: Function, width: number, height: number}\n\nconst Camera: FC<CameraProps> = ({ctxReady, width, height}) => {\n  const videoConstraints = {\n    width: width,\n    height: height,\n    facingMode: \"environment\"\n  };\n\n  // States\n  const [imageSrc, setImageSrc] = useState<any>('');\n  const [imageElement, setImageElement] = useState<any>('');\n  const [imageRef, setImageRef] = useState<any>('');\n  const [loadedImage, setLoadedImage] = useState<any>('');\n  const canvasRef = createRef() as any;\n\n  // Web Cam setup\n  const webcamRef = React.useRef(null) as any;\n  const capture = useCallback(() => {\n    if(webcamRef.current){\n      const canvas: HTMLCanvasElement = webcamRef.current.getCanvas(); \n      console.log(canvas);\n      ctxReady(webcamRef.current.getCanvas().ctx);\n      setImageSrc(webcamRef.current.getScreenshot());\n    }\n    },[webcamRef]\n  );\n  const webcam = <Webcam className={styles.camera} ref={webcamRef} screenshotFormat=\"image/jpeg\" videoConstraints={videoConstraints}/>;\n\n  useEffect(() => {\n    setImageElement(<img onLoad={getImageHeight} ref={onRefChange} src={imageSrc} alt=\"Captured Image\" id=\"image\" />);\n  }, [imageSrc]);\n\n  const onRefChange = useCallback(node => {\n    setImageRef(node);\n  }, [imageElement]);\n\n  const getImageHeight = function({target: img} :any){\n    setLoadedImage(img);\n  }\n\n  useEffect(() => {\n    if(canvasRef.current && imageRef){\n      const ctx = canvasRef.current.getContext('2d');\n      ctx.drawImage(imageRef, 0, 0);\n      setImageElement('');\n      ctxReady(canvasRef.current);\n    }\n  }, [loadedImage]);\n\n  useEffect(() => {\n    if(canvasRef.current){\n      const boxSize = height * 0.7;\n      const xMod = (width - boxSize) / 2;\n      const yMod = (height - boxSize) / 2;\n      const ctx = canvasRef.current.getContext('2d');\n      for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n          if(!(x > xMod && x < (width - xMod) && y > yMod && y < (height - yMod))){\n            ctx.fillStyle = `rgba(${x},${y},0, 0.7)`;\n            ctx.fillRect(x, y, 1, 1);\n          }\n        }\n      }\n    }\n  }, []);\n\n  const reset = useCallback((callback) => {\n    setImageSrc(null);\n    setLoadedImage(null);\n    setImageElement('');\n    ctxReady(null);\n  },[]);\n\n  const uiButton = imageSrc ? \n    <button className={styles.uiButton} onClick={reset}><img src={binIcon} alt=\"reset\" /></button> : \n    <button className={styles.uiButton} onClick={capture}><img src={cameraIcon} alt=\"take a picture\" /></button>;\n\n  const canvas = <canvas className={styles.canvas} ref={canvasRef} height={height} width={width}/>;\n  \n  return <>\n    <div className={styles.CameraWrapper}>\n      {imageSrc && imageElement}\n      {canvas}\n      {!imageSrc && webcam}\n    </div>\n    {uiButton}\n  </>;\n};\n\nexport default Camera;","class Point {\r\n    x : number;\r\n    y : number;\r\n\r\n    rIndex : number;\r\n    gIndex : number;\r\n    bIndex : number;\r\n\r\n    constructor(x:number, y:number, imageWidth:number) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.rIndex = (x + y * imageWidth) * 4;\r\n        this.gIndex = this.rIndex + 1;\r\n        this.bIndex = this.gIndex + 1;\r\n    }\r\n\r\n    getColourAsHex(data: Uint8ClampedArray){\r\n        return `#${this.hexVal(data[this.rIndex])}${this.hexVal(data[this.gIndex])}${this.hexVal(data[this.bIndex])}`;\r\n    }\r\n\r\n    getColourMagnitued(data: Uint8ClampedArray){\r\n        return data[this.rIndex]+data[this.gIndex]+data[this.bIndex];\r\n    }\r\n\r\n    hexVal(n: number){\r\n        return n.toString(16);\r\n    }\r\n\r\n    rgbVal(hexString: string){\r\n        return hexString.slice(1).match(/.{1,2}/g)?.map(s => Number(`0x${s}`));\r\n    }\r\n\r\n    plot(data: Uint8ClampedArray, colour: string = \"#4be11e\"){\r\n        const rgb = this.rgbVal(colour);\r\n        if (rgb) {\r\n            data[this.rIndex] = rgb[0];\r\n            data[this.gIndex] = rgb[1];\r\n            data[this.bIndex] = rgb[2];\r\n        }else{\r\n            console.log(`bad colour`);\r\n        }\r\n    }\r\n}\r\nexport default Point;","const defaultOptions = {\r\n    lowThreshold: 10,\r\n    highThreshold: 30,\r\n    gaussianBlur: 1.1\r\n};\r\n\r\nconst Gx = [\r\n    [-1, 0, +1],\r\n    [-2, 0, +2],\r\n    [-1, 0, +1]\r\n];\r\n\r\nconst Gy = [\r\n    [-1, -2, -1],\r\n    [0, 0, 0],\r\n    [+1, +2, +1]\r\n];\r\n\r\nconst convOptions = {\r\n    bitDepth: 32,\r\n    mode: 'periodic'\r\n};\r\n\r\nexport default function cannyEdgeDetector(image: any, options?: any) {\r\n    image.checkProcessable('Canny edge detector', {\r\n        bitDepth: 8,\r\n        channels: 1,\r\n        components: 1\r\n    });\r\n\r\n    options = Object.assign({}, defaultOptions, options);\r\n\r\n    const width = image.width;\r\n    const height = image.height;\r\n    const brightness = image.maxValue;\r\n\r\n    const gfOptions = {\r\n        sigma: options.gaussianBlur,\r\n        radius: 3\r\n    };\r\n\r\n    const gf = image.gaussianFilter(gfOptions);\r\n\r\n    const gradientX = gf.convolution(Gy, convOptions);\r\n    const gradientY = gf.convolution(Gx, convOptions);\r\n\r\n    const G = gradientY.hypotenuse(gradientX);\r\n\r\n    const Image = image.constructor;\r\n\r\n    const nms = new Image(width, height, {\r\n        kind: 'GREY',\r\n        bitDepth: 32\r\n    });\r\n\r\n    const edges = new Image(width, height, {\r\n        kind: 'GREY',\r\n        bitDepth: 32\r\n    });\r\n\r\n    const finalImage = new Image(width, height, {\r\n        kind: 'GREY'\r\n    });\r\n\r\n    // Non-Maximum supression\r\n    for (var i = 1; i < width - 1; i++) {\r\n        for (var j = 1; j < height - 1; j++) {\r\n\r\n            var dir = (Math.round(Math.atan2(gradientY.getValueXY(i, j, 0), gradientX.getValueXY(i, j, 0)) * (5.0 / Math.PI)) + 5) % 5;\r\n\r\n            if (\r\n                !((dir === 0 && (G.getValueXY(i, j, 0) <= G.getValueXY(i, j - 1, 0) || G.getValueXY(i, j, 0) <= G.getValueXY(i, j + 1, 0)))\r\n                    || (dir === 1 && (G.getValueXY(i, j, 0) <= G.getValueXY(i - 1, j + 1, 0) || G.getValueXY(i, j, 0) <= G.getValueXY(i + 1, j - 1, 0)))\r\n                    || (dir === 2 && (G.getValueXY(i, j, 0) <= G.getValueXY(i - 1, j, 0) || G.getValueXY(i, j, 0) <= G.getValueXY(i + 1, j, 0)))\r\n                    || (dir === 3 && (G.getValueXY(i, j, 0) <= G.getValueXY(i - 1, j - 1, 0) || G.getValueXY(i, j, 0) <= G.getValueXY(i + 1, j + 1, 0))))\r\n            ) {\r\n                nms.setValueXY(i, j, 0, G.getValueXY(i, j, 0));\r\n            }\r\n        }\r\n    }\r\n\r\n    for (i = 0; i < width * height; ++i) {\r\n        var currentNms = nms.data[i];\r\n        var currentEdge = 0;\r\n        if (currentNms > options.highThreshold) {\r\n            currentEdge++;\r\n            finalImage.data[i] = brightness;\r\n        }\r\n        if (currentNms > options.lowThreshold) {\r\n            currentEdge++;\r\n        }\r\n\r\n        edges.data[i] = currentEdge;\r\n    }\r\n\r\n    // Hysteresis: first pass\r\n    var currentPixels = [];\r\n    for (i = 1; i < width - 1; ++i) {\r\n        for (j = 1; j < height - 1; ++j) {\r\n            if (edges.getValueXY(i, j, 0) !== 1) {\r\n                continue;\r\n            }\r\n\r\n            outer: for (var k = i - 1; k < i + 2; ++k) {\r\n                for (var l = j - 1; l < j + 2; ++l) {\r\n                    if (edges.getValueXY(k, l, 0) === 2) {\r\n                        currentPixels.push([i, j]);\r\n                        finalImage.setValueXY(i, j, 0, brightness);\r\n                        break outer;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Hysteresis: second pass\r\n    while (currentPixels.length > 0) {\r\n        var newPixels = [];\r\n        for (i = 0; i < currentPixels.length; ++i) {\r\n            for (j = -1; j < 2; ++j) {\r\n                for (k = -1; k < 2; ++k) {\r\n                    if (j === 0 && k === 0) {\r\n                        continue;\r\n                    }\r\n                    var row: any = currentPixels[i][0] + j;\r\n                    var col: any = currentPixels[i][1] + k;\r\n                    if (edges.getValueXY(row, col, 0) === 1 && finalImage.getValueXY(row, col, 0) === 0) {\r\n                        newPixels.push([row, col]);\r\n                        finalImage.setValueXY(row, col, 0, brightness);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        currentPixels = newPixels;\r\n    }\r\n\r\n    return finalImage;\r\n}","import Line from \"./Line\";\r\n\r\n//HSctx.fillStyle = 'rgba(0,0,0,.01)';\r\nclass HoughTransform{\r\n    THICKNESS = 2;\r\n    HOZIZONTAL = \"h\";\r\n    VERTICAL = \"v\";\r\n    ctx: any;\r\n    numAngleCells = 360;\r\n    rhoMax: number;\r\n    accum = new Array(this.numAngleCells);\r\n    drawingWidth: number;\r\n    drawingHeight: number;\r\n    cosTable = new Array(this.numAngleCells);\r\n    sinTable = new Array(this.numAngleCells);\r\n    minLength: number;\r\n    distance: number;\r\n    maxTilt: number;\r\n\r\n    constructor(canvas: HTMLCanvasElement, distance: number, minLength: number, maxTilt: number){\r\n        this.maxTilt = maxTilt;\r\n        this.minLength = minLength;\r\n        this.distance = distance;\r\n        this.drawingWidth = canvas.width;\r\n        this.drawingHeight = canvas.height;\r\n        this.rhoMax = Math.sqrt(this.drawingWidth * this.drawingWidth + this.drawingHeight * this.drawingHeight);\r\n        this.ctx = canvas.getContext('2d');\r\n        for (var theta = 0, thetaIndex = 0; thetaIndex < this.numAngleCells; theta += Math.PI / this.numAngleCells, thetaIndex++) {\r\n            this.cosTable[thetaIndex] = Math.cos(theta);\r\n            this.sinTable[thetaIndex] = Math.sin(theta);\r\n        }\r\n    }\r\n\r\n    findMaxInHough = () => {\r\n        let lines = [] as Array<Line>;\r\n        for (var i=0;i<360;i++) {\r\n            for (var j=0;j<this.accum[i].length;j++) {\r\n                if (this.accum[i][j]>max) {}\r\n                    var max = this.accum[i][j];\r\n                    if (max>this.minLength) {\r\n                        var a=this.cosTable[i];\r\n                        var b=this.sinTable[i];\r\n                        var bestRho = j;\r\n                        bestRho<<=1; // accumulator is bitshifted\r\n                        bestRho-=this.rhoMax; /// accumulator has rhoMax added\r\n                        lines.push({   \r\n                            x1: a*bestRho+1000*(-b),\r\n                            y1: (b*bestRho+1000*(a)),\r\n                            x2: a*bestRho-1000*(-b),\r\n                            y2: (b*bestRho-1000*(a))   \r\n                        } as Line);\r\n                    }\r\n            }\r\n        }\r\n        const newLines = [] as Array<Line>;\r\n        lines = lines.filter(l => {\r\n            const mainX = (l.x1 - l.x2) < -this.maxTilt || (l.x2 - l.x1) < -this.maxTilt;\r\n            const mainY = (l.y1 - l.y2) < -this.maxTilt || (l.y2 - l.y1) < -this.maxTilt;\r\n            return !(mainX && mainY)\r\n        });\r\n        lines.forEach((line: Line, i: number) => {\r\n            this.drawLine(line, `rgba(0,${(255 / lines.length) * (lines.length - i)},${(255 / lines.length) * i},1)`);\r\n        });\r\n        while(lines.length > 0){\r\n            const line: Line = lines.pop() as Line;\r\n            newLines.push(line);\r\n            lines = lines.filter(l => {\r\n                const mainLineOrientation = this.checkOrientation(line)\r\n                const secondaryLineOrientation = this.checkOrientation(l);\r\n                if(mainLineOrientation != secondaryLineOrientation) return true;\r\n\r\n                const main = mainLineOrientation == this.VERTICAL ? \r\n                    this.getMidPoint(line.x1, line.x2):\r\n                    this.getMidPoint(line.y1,  line.y2);\r\n                const secondary = mainLineOrientation == this.VERTICAL ? \r\n                    this.getMidPoint(l.x1, l.x2):\r\n                    this.getMidPoint(l.y1,  l.y2);\r\n                return !this.getLineDistance(main, secondary);\r\n            });\r\n        }\r\n        console.log(newLines);\r\n        newLines.forEach((line: Line) => {\r\n            this.drawLine(line, `rgba(${(255 / lines.length) * (i)},0,${(255 / lines.length) * (lines.length - i)},1)`);\r\n            this.drawLine(line, 'rgba(255,0,0,1)');\r\n        });\r\n        return newLines;\r\n    }\r\n\r\n    checkOrientation(line: Line){\r\n        return this.getDif(line.x1, line.x2) > this.getDif(line.y1, line.y2) ? this.HOZIZONTAL : this.VERTICAL;\r\n    }\r\n\r\n    getDif(start: number, end: number){\r\n        const max = start > end ? start : end;\r\n        const min = start > end ? end : start;\r\n        return (max - min);\r\n    }\r\n\r\n    getMidPoint(start: number, end: number){\r\n        const max = start > end ? start : end;\r\n        const min = start > end ? end : start;\r\n        return min + ((max - min) / 2);\r\n    }\r\n\r\n    getLineDistance(start: number, end: number){\r\n        const max = start > end ? start : end;\r\n        const min = start > end ? end : start;\r\n        return (min + this.distance) > max;\r\n    }\r\n\r\n    drawLine = (line: Line, colour: string) => {\r\n        console.log(line);\r\n        // now to backproject into drawing space\r\n        //console.log(bestTheta,bestRho);\r\n        //console.log(x1,y1,x2,y2);\r\n        this.ctx.beginPath();\r\n        this.ctx.strokeStyle=colour;\r\n        this.ctx.moveTo(line.x1+this.drawingWidth/2,line.y1+this.drawingHeight/2);\r\n        this.ctx.lineTo(line.x2+this.drawingWidth/2,line.y2+this.drawingHeight/2);\r\n        this.ctx.stroke();\r\n        this.ctx.strokeStyle='rgba(0,0,0,1)';\r\n        this.ctx.closePath();\r\n    }\r\n\r\n    houghAcc = (x: number, y: number) => {\r\n        console.log(\"running\");\r\n        var rho;\r\n        var thetaIndex = 0;\r\n        x -= this.drawingWidth / 2;\r\n        y -= this.drawingHeight / 2;\r\n        for (; thetaIndex < this.numAngleCells; thetaIndex++) {\r\n            rho = this.rhoMax + x * this.cosTable[thetaIndex] + y * this.sinTable[thetaIndex];\r\n            rho >>= 1;\r\n            if (this.accum[thetaIndex] == undefined) this.accum[thetaIndex] = [];\r\n            if (this.accum[thetaIndex][rho] == undefined) {\r\n                this.accum[thetaIndex][rho] = 1;\r\n            } else {\r\n                this.accum[thetaIndex][rho]++;\r\n            }\r\n        }\r\n    }\r\n}\r\nexport default HoughTransform;","class Intersection{\r\n    x: number;\r\n    y: number;\r\n\r\n    constructor(x: number, y: number){\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}\r\nexport default Intersection;","import Intersection from \"./Intersection\";\r\nimport {Tesseract} from \"tesseract.ts\";\r\n\r\nclass Square{\r\n\r\n    id: any; \r\n    ctx: any; \r\n    canvas: any; \r\n    topLeft: any; \r\n    bottomRight: any;\r\n    intialised: any;\r\n    width: any;\r\n    height: any;\r\n    numbers: any;\r\n    provisonal: boolean;\r\n    number: string = '';\r\n    pos: any;\r\n    sq: any;\r\n    row: any;\r\n    col: any;\r\n    filteredPos: any;\r\n\r\n    constructor(id :any, ctx:any, canvas:any, topLeft:any, bottomRight:any){\r\n        this.id = id;\r\n        this.ctx = ctx\r\n        this.topLeft = new Intersection(topLeft.x, topLeft.y);\r\n        this.bottomRight = new Intersection(bottomRight.x, bottomRight.y);\r\n        this.canvas = canvas;\r\n        this.intialised = false;\r\n        this.width = this.bottomRight.x - this.topLeft.x;\r\n        this.height = this.bottomRight.y - this.topLeft.y;\r\n        this.numbers = ['1','2','3','4','5','6','7','8','9'];\r\n\r\n        const heightMod = this.percent(this.height, 15);\r\n        const widthMod = this.percent(this.width, 15);\r\n        this.bottomRight.y = this.bottomRight.y - heightMod;\r\n        this.bottomRight.x = this.bottomRight.x - widthMod;\r\n        this.topLeft.y = this.topLeft.y + heightMod;\r\n        this.topLeft.x = this.topLeft.x + widthMod;\r\n        this.width = this.bottomRight.x - this.topLeft.x;\r\n        this.height = this.bottomRight.y - this.topLeft.y;\r\n        this.provisonal = false;\r\n    }\r\n\r\n    getPos(){\r\n        const listToFilter = this.pos && this.pos.length > 0 ? this.pos : this.numbers;\r\n        this.pos = listToFilter.filter( (n: any) => !(this.inList(this.row, n) || this.inList(this.col, n) || this.inList(this.sq, n)));\r\n    }\r\n\r\n    filterPos(){\r\n        this.tryFilter(this.sq);\r\n        this.tryFilter(this.row);\r\n        this.tryFilter(this.col);\r\n    }\r\n\r\n    tryFilter(list:any){\r\n        const others:any = [];\r\n        this.row.filter((c:Square) => !c.number && c.id != this.id).forEach((c:Square) => others.push(...c.pos));\r\n        this.col.filter((c:Square) => !c.number && c.id != this.id).forEach((c:Square) => others.push(...c.pos));\r\n        list.filter((c:Square) => !c.number && c.id != this.id).forEach((c:Square) => others.push(...c.pos));\r\n        this.filteredPos = this.pos.filter((n:any) => !others.includes(n));\r\n        if(this.filteredPos.length > 0 && this.filteredPos.length < this.pos.length){\r\n            this.pos = this.filteredPos;\r\n        }\r\n    }\r\n\r\n    inList(list:any, number:string){\r\n        return list.filter((c:Square) => c.number === number).length != 0\r\n    }\r\n\r\n    percent(val: any, percent: any){\r\n        return (val / 100) * percent;\r\n    }\r\n\r\n    draw(colour='yellow'){\r\n        this.ctx.fillStyle = colour;\r\n        this.ctx.beginPath();\r\n        this.ctx.moveTo(this.topLeft.x, this.topLeft.y);\r\n        this.ctx.lineTo(this.bottomRight.x, this.topLeft.y);\r\n        this.ctx.lineTo(this.bottomRight.x, this.bottomRight.y);\r\n        this.ctx.lineTo(this.topLeft.x, this.bottomRight.y);\r\n        this.ctx.lineTo(this.topLeft.x, this.topLeft.y);\r\n        this.ctx.closePath();\r\n        this.ctx.fill();\r\n    }\r\n\r\n    blank(){\r\n        this.draw('white');\r\n        this.number = '';\r\n        this.pos = [];\r\n        this.intialised = true;\r\n        this.provisonal = true;\r\n    }\r\n\r\n    callback(dataURL: string) {\r\n        if(this.isEmpty()){\r\n            this.blank();\r\n            return;\r\n        }\r\n        document.body.style.backgroundImage = 'url(' + dataURL + ')';\r\n        Tesseract.recognize(\r\n            dataURL,'eng'\r\n        ).progress(console.log).then((res: any) => {\r\n            console.log(res.text);\r\n            const number = res.text ? res.text.replace(/[^0-9]/g,\"\").substring(0, 1) : \"\";\r\n            if(number){\r\n                //this.draw('orange');\r\n                this.number = number;\r\n                this.drawLetter();\r\n                this.intialised = true;\r\n                this.provisonal = false;\r\n                console.log(`The number you are looking at is a ${res.text} in square ${this.toString()}`);\r\n            }else{\r\n                console.log(`Nothing found in square ${this.toString()}`);\r\n                this.blank();\r\n            }\r\n        }).catch(() => {\r\n            this.callback(dataURL)\r\n        })\r\n    }\r\n\r\n    getLetter() {\r\n        // create an in-memory canvas\r\n        const offsetX = this.topLeft.x\r\n        const offsetY = this.topLeft.y\r\n        const width = this.bottomRight.x - this.topLeft.x\r\n        const height = this.bottomRight.y - this.topLeft.y\r\n        var buffer = document.createElement('canvas') as HTMLCanvasElement;\r\n        var b_ctx = buffer.getContext('2d');\r\n        // set its width/height to the required ones\r\n        buffer.width = width;\r\n        buffer.height = height;\r\n        // draw the main canvas on our buffer one\r\n        // drawImage(source, source_X, source_Y, source_Width, source_Height, \r\n        //  dest_X, dest_Y, dest_Width, dest_Height)\r\n        if(b_ctx){\r\n            b_ctx.drawImage(this.canvas, offsetX, offsetY, width, height,\r\n                0, 0, buffer.width, buffer.height);\r\n        }\r\n        // now call the callback with the dataURL of our buffer canvas\r\n        this.callback(buffer.toDataURL());\r\n    }\r\n\r\n    drawLetter() {\r\n        this.ctx.fillStyle = \"black\";\r\n        this.ctx.font = '25px Courier New';\r\n        this.ctx.fillText(this.number, this.topLeft.x, this.bottomRight.y);\r\n    }\r\n\r\n    toString(){\r\n        return `|${this.number}|`\r\n    }\r\n\r\n    isEmpty(){\r\n        const imageData = this.ctx.getImageData(this.topLeft.x, this.topLeft.y, this.width, this.height); //take away the .data\r\n\r\n        var r, g, b;\r\n        var count = 0;\r\n        var blackCount = 0; \r\n        for(var i = 0; i+3 < imageData.data.length; i+=4) {\r\n            r = imageData.data[i];\r\n            g = imageData.data[i+1];\r\n            b = imageData.data[i+2];\r\n\r\n            if(r + b + g < 255) { // if pixel is not black, and not transparent          \r\n                blackCount++;\r\n            }\r\n            count++;\r\n        }\r\n        const percent = (blackCount / (count / 100));\r\n        return !(percent > 15);\r\n    }\r\n}\r\nexport default Square;","import Square from \"./Square\";\r\n\r\nclass GameBoard {\r\n    cols :any;\r\n    rows :any;\r\n    squares :any;\r\n    solvefailed :boolean;\r\n    cells: any;\r\n    colours: string[] = [\"teal\", \"cyan\", \"pink\", \"magenta\", \"lightgrey\", \"yellow\", \"red\", \"lime\", \"orange\"];\r\n    constructor() {\r\n        this.cols = [[], [], [], [], [], [], [], [], []];\r\n        this.rows = [];\r\n        this.squares = [];\r\n        this.solvefailed = false;\r\n    }\r\n\r\n    populateBoard(cells: any) {\r\n        this.cells = cells;\r\n        for (var i = 0; i < 9; i++) {\r\n            const start = i * 9;\r\n            const end = start + 9;\r\n            this.rows.push(this.cells.slice(start, end));\r\n        }\r\n\r\n        this.rows.forEach((c:any, i:number) => {\r\n            c.forEach((e:any, j:number) => {\r\n                this.cols[j][i] = this.rows[i][j];\r\n            });\r\n        });\r\n\r\n        for (var i = 0; i < 3; i++) {\r\n            const group = this.rows.slice(i * 3, (i * 3) + 3);\r\n            for (var j = 0; j < 3; j++) {\r\n                const start = j * 3;\r\n                const end = start + 3;\r\n                const bSquare = [];\r\n                bSquare.push(...group[0].slice(start, end));\r\n                bSquare.push(...group[1].slice(start, end));\r\n                bSquare.push(...group[2].slice(start, end));\r\n                this.squares.push(bSquare);\r\n            }\r\n        }\r\n\r\n        this.cells.forEach((c: any) => this.populateCellData(c));\r\n        console.log(this.cols);\r\n        console.log(this.rows);\r\n        console.log(this.squares);\r\n    }\r\n\r\n    getRandomInt(max: number) {\r\n        return Math.floor(Math.random() * max);\r\n    }\r\n\r\n    solve(){\r\n        this.updatePossible();\r\n        this.filterPossible();\r\n        const options = this.cells.filter((c: Square) => !c.number);\r\n        if(options.filter((c: Square) => c.pos.length == 0).length > 0){\r\n            this.failed();\r\n            return;\r\n        }\r\n        const cell = this.getNextBest();\r\n        this.guessCell(cell);\r\n    }\r\n\r\n    guessCell(cell: Square){\r\n        if(cell && cell.pos && cell.pos.length){\r\n            this.fillCell(cell, cell.pos[this.getRandomInt(cell.pos.length)]);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getNextBest(){\r\n        const options = this.cells.filter((c: Square) => !c.number);\r\n        for(let i = 1; i <= 8; i++){\r\n            const refinedOptions = options.filter((c: Square) => c.pos.length == i);\r\n            if(refinedOptions.length){\r\n                return refinedOptions[this.getRandomInt(refinedOptions.length)];\r\n            }\r\n        }\r\n    }\r\n\r\n    updatePossible(){\r\n        this.cells.filter((c: Square) => !c.number).forEach( (cell: Square) => {\r\n            cell.getPos();\r\n        });\r\n    }\r\n\r\n    filterPossible(){\r\n        this.cells.filter((c: Square) => !c.number).forEach( (cell: Square) => {\r\n            cell.filterPos();\r\n        });\r\n    }\r\n\r\n    fillCell(cell: Square, number: string){\r\n        cell.number = number;\r\n        cell.draw(this.colours[(+number)-1]);\r\n        cell.drawLetter();\r\n        this.solvefailed = false;\r\n    }\r\n\r\n    failed(){\r\n        this.cells.filter((c: Square) => c.provisonal).forEach((c: Square) => c.draw('pink'));\r\n        setTimeout(() => {this.clearBoard()}, 250);\r\n    }\r\n\r\n    clearBoard(){\r\n        this.cells.filter((c: Square) => c.provisonal).forEach((c: Square) => c.blank());\r\n    }\r\n\r\n    solved(){\r\n        return this.cells.filter((c: Square) => !c.number).length === 0\r\n    }\r\n\r\n    populateCellData(cell: Square){\r\n        cell.row = this.getRow(cell);\r\n        cell.col = this.getCol(cell);\r\n        cell.sq = this.getSquare(cell);\r\n    }\r\n\r\n    getRow(cell: Square){\r\n        return this.rows.filter((i:any) => i.filter((c: Square) => c.id === cell.id).length == 1)[0];\r\n    }\r\n\r\n    getCol(cell: Square){\r\n        return this.cols.filter((i:any) => i.filter((c: Square) => c.id === cell.id).length == 1)[0];\r\n    }\r\n\r\n    getSquare(cell: Square){\r\n        return this.squares.filter((i:any) => i.filter((c: Square) => c.id === cell.id).length == 1)[0];\r\n    }\r\n}\r\nexport default GameBoard;","import React, { createRef, FC, useEffect, useState } from 'react';\nimport styles from './Decector.module.css';\nimport Point from '../../model/Point';\nimport cannyEdgeDetector from '../../model/CannyEdgeDetector';\nimport HoughTransform from '../../model/HoughTransform';\nimport Image from 'image-js';\nimport Intersection from '../../model/Intersection';\nimport Square from '../../model/Square';\nimport GameBoard from '../../model/GameBoard';\n\ninterface DecectorProps {\n  canvas: any,\n  imageWidth: number,\n  imageHeight: number,\n  reset: Function\n}\n\nconst Decector: FC<DecectorProps> = ({canvas, imageWidth, imageHeight, reset}) => {\n  const ctx = canvas.getContext('2d');\n  const [threshholdDone, setThreshholdDone] = useState<any>(false);\n  const [edges, setEdges] = useState<any>(null);\n  const [origin, setOrigin] = useState<any>(null);\n  const [points, setPoints] = useState<any>(null);\n\n  const maxGap = 20;\n  const lineThreshold = 20;\n  const globalThreshold = 100;\n  const xColour = \"red\";\n  const yColour = \"green\";\n  const imageRef = createRef() as any;\n  const orgImageRef = createRef() as any;\n  const intersectionPoints: Intersection[] = [];\n  const squares: Square[] = [];\n  const gameBoard = new GameBoard();\n  const boxSize = imageHeight * 0.7;\n  const xMod = (imageWidth - boxSize) / 2;\n  const yMod = (imageHeight - boxSize) / 2;\n\n  const minLineLength = 120;\n\n  useEffect(() => {\n    setTimeout(()=>{\n      if(!points){\n        const freshPoints = new Array<Point>();\n        for (let y = 0; y < imageHeight; y++) {\n          for (let x = 0; x < imageWidth; x++) {\n            freshPoints.push(new Point(x, y, imageWidth));\n          }\n        }\n        setPoints(freshPoints);\n      }\n    }, 1);\n  }, [threshholdDone]);\n\n  useEffect(() => {\n    setTimeout(()=>{\n      //threshold();\n      Image.load(canvas.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\")).then((img: Image) => {\n        setOrigin(img.toDataURL());\n        const grey = img.grey();\n        setEdges(cannyEdgeDetector(grey));\n      });\n      // getYLines(pixelData);\n      //getXLines();\n    }, 1);\n  }, [points]);\n  \n  const makeImage = () => {\n    const img = <img onLoad={copyToCanvas} ref={imageRef} src={edges.toDataURL()} alt=\"Captured Image\" id=\"image\" />;\n    return ;\n  }\n\n  const copyToCanvas = () =>{\n    ctx.drawImage(imageRef.current, 0, 0);\n    boxImage();\n    setTimeout(() =>{\n      doHueTransform();\n    }, 2000);\n  }\n\n  const doHueTransform = () => {\n    const maxTilt = (boxSize*0.05);\n    const houghTransform = new HoughTransform(canvas, (boxSize*0.08), (boxSize*0.5), maxTilt);\n    const pixelData:ImageData = ctx.getImageData(0, 0, imageWidth, imageHeight);\n    ctx.drawImage(orgImageRef.current, 0, 0);\n    upContrast(95);\n    threshold();\n    points.forEach( (point: Point) => {\n      if(inBox(point) && point.getColourMagnitued(pixelData.data) > 10){\n        houghTransform.houghAcc(point.x,point.y);\n      }\n    });\n\n    const lines = houghTransform.findMaxInHough();\n    const hlines = lines.filter(l =>  l.y1 + maxTilt > l.y2 && l.y1 - maxTilt < l.y2);\n    const vlines = lines.filter(l =>  l.x1 + maxTilt > l.x2 && l.x1 - maxTilt < l.x2);\n    if(vlines.length != 10 || hlines.length != 10) return reset(null);\n    hlines.forEach((hl) => {\n      vlines.forEach((vl) => {\n          intersects(vl.x1 + (imageWidth / 2), hl.y1 + (imageHeight / 2));\n      });\n    });\n    console.log(intersectionPoints);\n    findSquares();\n    waitForSquares();\n  }\n\n  const findSquares = () => {\n    intersectionPoints.reverse().forEach(\n        (p, i) => {\n            if (i + 11 < intersectionPoints.length && (i - 9) % 10 != 0) {\n                const sq = new Square(i, ctx, canvas, p, intersectionPoints[i + 11]);\n                squares.push(sq);\n            }\n        });\n    squares.forEach((s, i) => {\n        setTimeout(function () {\n            s.getLetter();\n        }, i * 10);\n    });\n}\n\n  const intersects = (x:number, y:number) => {\n    intersectionPoints.push(new Intersection(x, y));\n  }\n\n  const putImageData = (imageData: ImageData) => {\n    ctx.putImageData(imageData, 0, 0);\n  };\n\n  const threshold = () => {\n      const pixelData: ImageData = ctx.getImageData(0, 0, imageWidth, imageHeight);\n      points.forEach( (point: Point) => {\n        if(point.getColourMagnitued(pixelData.data) / 3 < globalThreshold) {\n          point.plot(pixelData.data, \"#000000\");\n        }else{\n          point.plot(pixelData.data, \"#FFFFFF\");\n        }\n      });\n      putImageData(pixelData);\n  }\n\n  const boxImage = () => {\n    const pixelData: ImageData = ctx.getImageData(0, 0, imageWidth, imageHeight);\n    points.forEach( (point: Point) => {\n      if(!(inBox(point))){\n        point.plot(pixelData.data, \"#000000\");\n      }\n    });\n    putImageData(pixelData);\n  }\n\n  const inBox = (point: Point) => {\n    return point.x > xMod && point.x < (imageWidth - xMod) && point.y > yMod && point.y < (imageHeight - yMod);\n  }\n\n  const upContrast = (contrast: any) => {\n    const pixelData: ImageData = ctx.getImageData(0, 0, imageWidth, imageHeight);\n    contrast = (contrast/100) + 1;  //convert to decimal & shift range: [0..2]\n    var intercept = 128 * (1 - contrast);\n    for(var i=0;i<pixelData.data.length;i+=4){   //r,g,b,a\n      pixelData.data[i] = pixelData.data[i]*contrast + intercept;\n      pixelData.data[i+1] = pixelData.data[i+1]*contrast + intercept;\n      pixelData.data[i+2] = pixelData.data[i+2]*contrast + intercept;\n    }\n    putImageData(pixelData);\n  }\n\n  const squaresInitilized = () => {\n    return squares.filter(s => !s.intialised).length == 0;\n  }\n\nconst waitForSquares = function(){\n    console.log(`Waiting for sqaures to be done!`);\n    setTimeout(squaresInitilized() ? solveGame : waitForSquares, 1000);\n}\n\nconst solvecb = function(){\n    gameBoard.solve();\n    console.log(`HMMMMMM`);\n    setTimeout(gameBoard.solved() ? () => {solved()} : solvecb, 10);\n}\n\nconst solved = function(){\n    console.log('we did it')\n    gameBoard.cells.forEach((c: Square) => {\n        gameBoard.fillCell(c, c.number);\n    });\n}\n\nconst solveGame = function(){\n    gameBoard.populateBoard(squares)\n    solvecb();\n}\n\n  if(!threshholdDone){\n    setThreshholdDone(true);\n  }\n  return <> \n  {edges && <img onLoad={copyToCanvas} ref={imageRef} src={edges.toDataURL()} alt=\"Captured Image\" id=\"image\" hidden />}\n  {origin && <img ref={orgImageRef} src={origin} alt=\"Captured Image\" id=\"orgin\" hidden />}\n  </>;\n};\n\nexport default Decector;\n","import React, { useEffect, useRef, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Camera from './components/Camera/Camera';\nimport Decector from './components/Decector/Decector';\nimport cameraIcon from'./camera.svg';\nimport binIcon from'./bin.svg';\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height\n  };\n}\n\nfunction useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return windowDimensions;\n}\n\nfunction App() {\n\n  //const { height, width } = useWindowDimensions();\n  // const height = 768;\n  // const width = 1366;\n  // const portion = 0.6;\n  const imageWidth = 800;\n  const imageHeight = 600;\n\n\n  const [canvas, setCanvas] = useState<any>(null);\n  const cameraRef = React.createRef() as any;\n  const cameraComponent = <Camera ctxReady={setCanvas} width={imageWidth} height={imageHeight}></Camera>;\n  const detectorComponent = <Decector canvas={canvas} imageWidth={imageWidth} imageHeight={imageHeight} reset={setCanvas}/>;\n\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n          {cameraComponent}\n          {canvas && detectorComponent}\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"uiButton\":\"Camera_uiButton__1P_j6\",\"CameraWrapper\":\"Camera_CameraWrapper__24Xq_\",\"camera\":\"Camera_camera__31Kb3\",\"canvas\":\"Camera_canvas__1XXIi\"};","module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";","module.exports = __webpack_public_path__ + \"static/media/camera.c4363820.svg\";","module.exports = __webpack_public_path__ + \"static/media/bin.3fd11e65.svg\";"],"sourceRoot":""}